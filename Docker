# Docker Commands Cheatsheet

## General Commands
1. **`docker --version`**
   - Displays the installed Docker version.
   
2. **`docker info`**
   - Displays system-wide information about Docker.
   
3. **`docker help`**
   - Shows help information about Docker commands.

4. **`docker login`**
   - Logs into Docker Hub or a private registry.

5. **`docker logout`**
   - Logs out from Docker Hub or a private registry.

6. **`docker version`**
   - Displays the Docker client and server version.

7. **`docker system info`**
   - Displays detailed system information related to Docker.

8. **`docker history <image>`**
   - Shows the history of an image.

9. **`docker events`**
   - Displays real-time events from the Docker daemon.

---

## Image Commands
10. **`docker pull <image>`**
    - Pulls an image from Docker Hub or a private registry.

11. **`docker push <image>`**
    - Pushes an image to Docker Hub or a private registry.

12. **`docker build -t <tag> <path>`**
    - Builds an image from a Dockerfile.

13. **`docker images`**
    - Lists all Docker images.

14. **`docker rmi <image>`**
    - Removes a Docker image.

15. **`docker tag <image> <new_image>`**
    - Tags an image with a new name.

16. **`docker image ls`**
    - Lists all Docker images (alternative to `docker images`).

17. **`docker image prune`**
    - Removes unused or dangling images.

18. **`docker inspect <image>`**
    - Provides detailed information about an image.

19. **`docker save -o <filename.tar> <image>`**
    - Saves an image to a tar file.

20. **`docker load -i <filename.tar>`**
    - Loads an image from a tar file.

---

## Container Commands
21. **`docker run <image>`**
    - Runs a container from an image.

22. **`docker ps`**
    - Lists running containers.

23. **`docker ps -a`**
    - Lists all containers (running and stopped).

24. **`docker exec -it <container_id> <command>`**
    - Executes a command inside a running container.

25. **`docker start <container_id>`**
    - Starts a stopped container.

26. **`docker stop <container_id>`**
    - Stops a running container.

27. **`docker restart <container_id>`**
    - Restarts a running container.

28. **`docker pause <container_id>`**
    - Pauses a running container.

29. **`docker unpause <container_id>`**
    - Unpauses a paused container.

30. **`docker kill <container_id>`**
    - Sends a signal to immediately stop a container.

31. **`docker rm <container_id>`**
    - Removes a stopped container.

32. **`docker logs <container_id>`**
    - Retrieves logs from a container.

33. **`docker exec -it <container_id> /bin/bash`**
    - Opens a bash shell in a running container.

34. **`docker container prune`**
    - Removes all stopped containers.

35. **`docker top <container_id>`**
    - Displays running processes inside a container.

---

## Network Commands
36. **`docker network ls`**
    - Lists all Docker networks.

37. **`docker network inspect <network_name>`**
    - Inspects a Docker network.

38. **`docker network create <network_name>`**
    - Creates a new Docker network.

39. **`docker network connect <network_name> <container_id>`**
    - Connects a container to a network.

40. **`docker network disconnect <network_name> <container_id>`**
    - Disconnects a container from a network.

41. **`docker network prune`**
    - Removes unused networks.

42. **`docker network rm <network_name>`**
    - Removes a Docker network.

---

## Volume Commands
43. **`docker volume ls`**
    - Lists all Docker volumes.

44. **`docker volume create <volume_name>`**
    - Creates a new Docker volume.

45. **`docker volume inspect <volume_name>`**
    - Inspects a Docker volume.

46. **`docker volume rm <volume_name>`**
    - Removes a Docker volume.

47. **`docker volume prune`**
    - Removes unused volumes.

---

## Docker Compose Commands
48. **`docker-compose up`**
    - Starts all services defined in a `docker-compose.yml` file.

49. **`docker-compose down`**
    - Stops and removes containers, networks, and volumes defined in `docker-compose.yml`.

50. **`docker-compose build`**
    - Builds or rebuilds services defined in `docker-compose.yml`.

51. **`docker-compose ps`**
    - Lists containers started by Docker Compose.

52. **`docker-compose logs`**
    - Shows logs from services defined in the `docker-compose.yml`.

53. **`docker-compose exec <service> <command>`**
    - Runs a command in a running container managed by Docker Compose.

54. **`docker-compose stop`**
    - Stops all running services defined in the `docker-compose.yml`.

55. **`docker-compose start`**
    - Starts all services defined in the `docker-compose.yml`.

56. **`docker-compose restart`**
    - Restarts services defined in the `docker-compose.yml`.

57. **`docker-compose run`**
    - Runs a one-off command on a service.

---

## Docker System Commands
58. **`docker system df`**
    - Displays disk usage for Docker objects.

59. **`docker system prune`**
    - Removes unused data (dangling images, stopped containers, unused networks).

60. **`docker system events`**
    - Streams events from the Docker daemon.

61. **`docker system info`**
    - Displays detailed system information.

---

## Docker Logs and Monitoring Commands
62. **`docker stats`**
    - Displays real-time statistics about running containers.

63. **`docker logs -f <container_id>`**
    - Follows logs for a container.

64. **`docker logs --tail <number> <container_id>`**
    - Shows the last n lines of logs from a container.

65. **`docker exec <container_id> top`**
    - Displays processes inside a running container.

---

## Docker Build Commands
66. **`docker build -t <tag> <path>`**
    - Builds a Docker image from a Dockerfile.

67. **`docker build --no-cache -t <tag> <path>`**
    - Builds an image without using cache.

68. **`docker build --build-arg <key>=<value>`**
    - Passes build-time variables to the Dockerfile.

69. **`docker build -f <Dockerfile>`**
    - Specifies a custom Dockerfile for the build.

---

## Docker Attach Commands
70. **`docker attach <container_id>`**
    - Attaches to a running container.

71. **`docker exec -it <container_id> <command>`**
    - Runs a command in an existing container.

72. **`docker exec -u <username> -it <container_id> <command>`**
    - Runs a command as a specific user inside the container.

---

## Cleanup Commands
73. **`docker container prune`**
    - Removes all stopped containers.

74. **`docker image prune`**
    - Removes unused images.

75. **`docker volume prune`**
    - Removes unused volumes.

76. **`docker network prune`**
    - Removes unused networks.

77. **`docker system prune --all`**
    - Removes unused data, including images not referenced by containers.

78. **`docker system prune --volumes`**
    - Removes unused volumes.

---

## Docker Security Commands
79. **`docker trust sign <image>`**
    - Signs an image to enable trusted image content.

80. **`docker trust inspect <image>`**
    - Inspects the signing status of an image.

81. **`docker scan <image>`**
    - Scans an image for vulnerabilities.

---

## Advanced Container Commands
82. **`docker container exec -it <container_id> bash`**
    - Runs a bash shell in a container.

83. **`docker container wait <container_id>`**
    - Waits for a container to stop and returns the exit code.

84. **`docker container export <container_id>`**
    - Exports a containerâ€™s filesystem as a tar archive.

85. **`docker container import <file.tar>`**
    - Imports a tar archive to create a new image.

---

## Docker Volume Mounting
86. **`docker run -v <host_path>:<container_path>`**
    - Mounts a host directory as a volume in the container.

87. **`docker run -v <volume_name>:<container_path>`**
    - Mounts a Docker volume as a container directory.

---

## Docker Custom Networks
88. **`docker network create --driver <driver_name> <network_name>`**
    - Creates a network with a custom driver.

89. **`docker network inspect <network_name>`**
    - Displays detailed information about a network.

90. **`docker network connect <network_name> <container_id>`**
    - Connects a container to a custom network.

---

## Docker Events
91. **`docker events`**
    - Streams Docker events in real-time.

92. **`docker events --filter event=<event_type>`**
    - Filters events based on type (e.g., "start", "stop").

---

## Docker Healthcheck
93. **`docker run --health-cmd="curl -f http://localhost/ || exit 1"`**
    - Defines a health check for a container.

94. **`docker inspect --format '{{json .State.Health}}' <container_id>`**
    - Retrieves the health status of a container.

---

## Docker with Kubernetes
95. **`docker context create kube <context_name>`**
    - Creates a Docker context for use with Kubernetes.

96. **`docker context use <context_name>`**
    - Switches to a different Docker context (Kubernetes, Swarm, etc.).

---

## Docker with Swarm
97. **`docker swarm init`**
    - Initializes a Docker Swarm.

98. **`docker swarm join`**
    - Joins a node to a Swarm.

99. **`docker service create --name <service_name> <image>`**
    - Creates a service in Docker Swarm.

100. **`docker service update <service_name>`**
    - Updates an existing service in Docker Swarm.

---

## Docker BuildKit (Experimental)
101. **`DOCKER_BUILDKIT=1 docker build .`**
    - Enables BuildKit for Docker builds (experimental).

---

## Conclusion
This cheatsheet covers over 100 Docker commands to help you manage Docker containers, images, volumes, networks, and more. Use this as a quick reference to streamline your Docker workflow!
